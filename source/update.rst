.. _operator-updates:

Update |operator|
================================================================================

|operator| allows upgrades to newer versions.
This includes upgrades of the Operator itself, and upgrades of the Percona
Distribution for PostgreSQL.

.. contents:: :local:

.. _operator-update:

Upgrading the Operator
----------------------

.. note:: Only the incremental update to a nearest minor version of the
   Operator is supported. To update
   to a newer version, which differs from the current version by more
   than one, make several incremental updates sequentially.

The following steps will allow you to update the Operator to current version
(use the name of your cluster instead of the ``<cluster-name>`` placeholder).

#. Pause the cluster in order to stop all possible activities:

   .. code:: bash

      $ kubectl patch perconapgcluster/<cluster-name> --type json -p '[{"op": "replace", "path": "/spec/pause", "value": true},{"op":"replace","path":"/spec/pgBouncer/size","value":0}]'

   .. |rarr|   unicode:: U+02192 .. RIGHTWARDS ARROW

#. If you upgrade the Operator **from a version earlier than 1.1.0**, the
   following additional step is needed for the 1.0.0 |rarr| 1.1.0 upgrade.

   .. code:: bash

      $ export CLUSTER=<cluster-name>
      $ for user in postgres primaryuser $(kubectl get perconapgcluster/${CLUSTER} -o yaml | yq r - 'spec.user'); do args+="--from-literal=$user=$(kubectl get secret/${CLUSTER}-${user}-o yaml | yq r - 'data.password' | base64 -d) "; done; eval kubectl create secret generic ${CLUSTER}-users "${args}"

   This command creates users' secrets with existing passwords. Otherwise, new
   secrets with autogenerated passwords will be created automatically,
   so existing passwords will be overwritten.

   .. note:: The ``pgbouncer`` user password is stored in encrypted form, and
      therefore it is not included in the above command. If you know this
      password and/or would like to update it, please add it as
      ``pgbouncer: base64encodednewpassword`` to the resulted Secret manually.
      Otherwise, this password needs no actions and will be overwritten by the
      Operator during upgrade.

#. Remove the old Operator and start the new Operator version:

   .. code:: bash

      $ kubectl delete \
          serviceaccounts/pgo-deployer-sa \
          clusterroles/pgo-deployer-cr \
          configmaps/pgo-deployer-cm \
          configmaps/pgo-config \
          clusterrolebindings/pgo-deployer-crb \
          jobs.batch/pgo-deploy \
          deployment/postgres-operator
 
      $ kubectl create -f https://raw.githubusercontent.com/percona/percona-postgresql-operator/v{{{release}}}/deploy/operator.yaml
      $ kubectl wait --for=condition=Complete job/pgo-deploy --timeout=90s

.. _operator-update-smartupdates:

Upgrading Percona Distribution for PostgreSQL
---------------------------------------------

Automatic upgrade
*****************

Starting from version 1.1.0, the Operator does fully automatic upgrades to
the newer versions of Percona PostgreSQL Cluster within the method named *Smart
Updates*.

The Operator will carry on upgrades according to the following algorithm.
It will query a special *Version Service* server at scheduled times to obtain
fresh information about version numbers and valid image paths needed for the
upgrade. If the current version should be upgraded, the Operator updates the CR
to reflect the new image paths and carries on sequential Pods deletion in a safe
order, allowing the cluster Pods to be re-deployed with the new image.

.. note:: Version Service is in technical preview status and is disabled by
          default for the Operator version 1.1.0. Disabling Version Service
          makes Smart Updates rely on the ``image`` keys in the :ref:`Operator's Custom Resource<operator.custom-resource-options>`.


The upgrade details are set in the ``upgradeOptions`` section of the 
``deploy/cr.yaml`` configuration file. Make the following edits to configure
updates:

#. Set the ``apply`` option to one of the following values:

   * ``recommended`` - automatic upgrades will choose the most recent version
     of software flagged as recommended (for clusters created from scratch,
     the Percona Distribution for PostgreSQL 14 version will be selected
     instead of the Percona Distribution for PostgreSQL 13 or 12 version
     regardless of the image path; for already existing clusters, 14 vs. 13 or
     12 branch choice will be preserved),
   * ``14-recommended``, ``13-recommended``, ``12-recommended`` - same as above,
     but preserves specific major Percona Distribution for PostgreSQL version
     for newly provisioned clusters (for example, 14 will not be automatically
     used instead of 13),
   * ``latest`` - automatic upgrades will choose the most recent version of
     the software available,
   * ``14-latest``, ``13-latest``, ``12-latest`` - same as above, but preserves
     specific major Percona Distribution for PostgreSQL version for newly
     provisioned clusters (for example, 14 will not be automatically
     used instead of 13),
   * *version number* - specify the desired version explicitly,
   * ``never`` or ``disabled`` - disable automatic upgrades

     .. note:: When automatic upgrades are disabled by the ``apply`` option, 
        Smart Update functionality will continue working for changes triggered
        by other events, such as updating a ConfigMap, rotating a password, or
        changing resource values.

#. Make sure the ``versionServiceEndpoint`` key is set to a valid Version
   Server URL (otherwise Smart Updates will not occur).

   A. You can use the URL of the official Percona's Version Service (default).
      Set ``versionServiceEndpoint`` to ``https://check.percona.com``.

   B. Alternatively, you can run Version Service inside your cluster. This
      can be done with the ``kubectl`` command as follows:
      
      .. code:: bash
      
         $ kubectl run version-service --image=perconalab/version-service --env="SERVE_HTTP=true" --port 11000 --expose

   .. note:: Version Service is never checked if automatic updates are disabled.
      If automatic updates are enabled, but Version Service URL can not be
      reached, upgrades will not occur.

#. Use the ``schedule`` option to specify the update checks time in CRON format.

The following example sets the midnight update checks with the official
Percona's Version Service:

.. code:: yaml

   spec:
     upgradeOptions:
       apply: recommended
       versionServiceEndpoint: https://check.percona.com       
       schedule: "0 4 * * *"
   ...

.. _operator-update-semi-auto-updates:

Semi-automatic upgrade
**********************

Semi-automatic update of Percona Distribution for PostgreSQL should be used with the Operator
version 1.0.0 or earlier. For all newer versions, use :ref:`automatic update<operator-update-smartupdates>`
instead.

The following steps will allow you to update the Operator to current version
(use the name of your cluster instead of the ``<cluster-name>`` placeholder).

#. Pause the cluster in order to stop all possible activities:

   .. code:: bash

      $ kubectl patch perconapgcluster/<cluster-name> --type json -p '[{"op": "replace", "path": "/spec/pause", "value": true},{"op":"replace","path":"/spec/pgBouncer/size","value":0}]'

#. Now you can switch the cluster to a new version:

   .. code:: bash

      $ kubectl patch perconapgcluster/<cluster-name> --type json -p '[{"op": "replace", "path": "/spec/backup/backrestRepoImage", "value": "percona/percona-postgresql-operator:{{{release}}}-ppg13-pgbackrest-repo"},{"op":"replace","path":"/spec/backup/image","value":"percona/percona-postgresql-operator:{{{release}}}-ppg13-pgbackrest"},{"op":"replace","path":"/spec/pgBadger/image","value":"percona/percona-postgresql-operator:{{{release}}}-ppg13-pgbadger"},{"op":"replace","path":"/spec/pgBouncer/image","value":"percona/percona-postgresql-operator:{{{release}}}-ppg13-pgbouncer"},{"op":"replace","path":"/spec/pgPrimary/image","value":"percona/percona-postgresql-operator:{{{release}}}-ppg13-postgres-ha"},{"op":"replace","path":"/spec/userLabels/pgo-version","value":"v{{{release}}}"},{"op":"replace","path":"/metadata/labels/pgo-version","value":"v{{{release}}}"},{"op": "replace", "path": "/spec/pause", "value": false}]'

   .. note:: The above example is composed in asumption of using PostgreSQL 13 as
      a database management system. For PostgreSQL 12 you should change all
      occurrences of the ``ppg13`` substring to ``ppg12``.

   This will carry on the image update, cluster version update and the pause status
   switch.

#. Now you can enable the ``pgbouncer`` again:

   .. code:: bash

      $ kubectl patch perconapgcluster/<cluster-name --type json -p \
          '[
              {"op":"replace","path":"/spec/pgBouncer/size","value":1}
          ]'

   Wait until the cluster is ready.
