#!/bin/bash

set -o errexit
set -o xtrace

TARGET_IMAGE_OPERATOR=${IMAGE_OPERATOR}
TARGET_IMAGE_DEPLOYER=${IMAGE_DEPLOYER}
TARGET_IMAGE_PGBOUNCER=${IMAGE_PGBOUNCER}
TARGET_IMAGE_PG_HA=${IMAGE_PG_HA}
TARGET_IMAGE_BACKREST=${IMAGE_BACKREST}
TARGET_IMAGE_BACKREST_REPO=${IMAGE_BACKREST_REPO}
TARGET_IMAGE_PGBADGER=${IMAGE_PGBADGER}

test_dir=$(realpath $(dirname $0))
. "${test_dir}"/../functions

function create_or_upgrade_to_version() {
	local cluster=$1
	local pgo_tag=$2
	local operator_yaml=${3}
	local namespace_mode=${4:-"disabled"}
	local operator_action=${5:-"install"}

	IMAGE_OPERATOR="percona/percona-postgresql-operator:${pgo_tag}-postgres-operator"
	IMAGE_DEPLOYER="percona/percona-postgresql-operator:${pgo_tag}-pgo-deployer"

	IMAGE_PGBOUNCER="percona/percona-postgresql-operator:${pgo_tag}-ppg$PG_VER-pgbouncer"
	IMAGE_PG_HA="percona/percona-postgresql-operator:${pgo_tag}-ppg$PG_VER-postgres-ha"
	IMAGE_BACKREST="percona/percona-postgresql-operator:${pgo_tag}-ppg$PG_VER-pgbackrest"
	IMAGE_BACKREST_REPO="percona/percona-postgresql-operator:${pgo_tag}-ppg$PG_VER-pgbackrest-repo"
	IMAGE_PGBADGER="percona/percona-postgresql-operator:${pgo_tag}-ppg$PG_VER-pgbadger"

	if [[ "x$operator_action" == 'xinstall' ]]; then
		deploy_operator '' ${operator_yaml} ${namespace_mode}
	else
		deploy_operator '' ${operator_yaml} ${namespace_mode} 'update'
	fi

	if [[ "x$(kubectl_bin get perconapgcluster/${cluster} -o jsonpath='{.metadata.name}')" == "x" ]]; then
		desc 'start cluster'
		create_user_secrets "${cluster}"
		spinup_pgcluster "${cluster}" "${test_dir}/conf/${pgo_tag}_cr.yaml"
	else
		kubectl_bin patch "perconapgcluster/${cluster}" --type json -p \
			'[
				{"op":"replace","path":"/spec/backup/backrestRepoImage","value":"'${IMAGE_BACKREST_REPO}'"},
				{"op":"replace","path":"/spec/backup/image","value":"'${IMAGE_BACKREST}'"},
				{"op":"replace","path":"/spec/pgBadger/image","value":"'${IMAGE_PGBADGER}'"},
				{"op":"replace","path":"/spec/pgBouncer/image","value":"'${IMAGE_PGBOUNCER}'"},
				{"op":"replace","path":"/spec/pgPrimary/image","value":"'${IMAGE_PG_HA}'"},
				{"op":"replace","path":"/spec/userLabels/pgo-version","value":"'${pgo_tag}'"},
				{"op":"replace","path":"/metadata/labels/pgo-version","value":"'${pgo_tag}'"},
				{"op":"replace","path":"/spec/pause","value":false}
			]'
	fi

	wait_cluster_consistency "${cluster}"
	wait_deployment "${cluster}"
	# wait for some significant time period. Pgbouncer pod may not be started otherwise
	sleep 10
	kubectl_bin patch "perconapgcluster/${cluster}" --type json -p \
		'[
			{"op":"replace","path":"/spec/pgBouncer/size","value":1}
		]'
	wait_cluster_consistency "${cluster}"
	wait_deployment "${cluster}-pgbouncer"

	kubectl_bin patch "perconapgcluster/${cluster}" --type json -p \
		'[
			{"op":"replace","path":"/spec/pgBouncer/size","value":0},
		]'
	sleep 10
	kubectl_bin patch "perconapgcluster/${cluster}" --type json -p \
		'[
			{"op":"replace","path":"/spec/pause","value":true},
		]'
	wait_cluster_status "${cluster}" "pgcluster Shutdown"
}

main() {
	create_namespace $namespace
	cluster="some-name"

	operator_action='install'
	create_or_upgrade_to_version ${cluster} '1.2.0' "${test_dir}/conf/1.2.0_operator.yaml" 'dynamic' "$operator_action"
	operator_action='update'
	create_or_upgrade_to_version ${cluster} '1.3.0' "${test_dir}/conf/1.3.0_operator.yaml" 'dynamic' "$operator_action"

	LATEST_TAG='1.4.0'
	IMAGE_OPERATOR="${TARGET_IMAGE_OPERATOR:-"perconalab/percona-postgresql-operator:${GIT_BRANCH}-postgres-operator"}"
	IMAGE_DEPLOYER="${TARGET_IMAGE_DEPLOYER:-"perconalab/percona-postgresql-operator:${GIT_BRANCH}-pgo-deployer"}"

	IMAGE_PGBOUNCER="${TARGET_IMAGE_PGBOUNCER:-"perconalab/percona-postgresql-operator:main-ppg$PG_VER-pgbouncer"}"
	IMAGE_PG_HA="${TARGET_IMAGE_PG_HA:-"perconalab/percona-postgresql-operator:main-ppg$PG_VER-postgres-ha"}"
	IMAGE_BACKREST="${TARGET_IMAGE_BACKREST:-"perconalab/percona-postgresql-operator:main-ppg$PG_VER-pgbackrest"}"
	IMAGE_BACKREST_REPO="${TARGET_IMAGE_BACKREST_REPO:-"perconalab/percona-postgresql-operator:main-ppg$PG_VER-pgbackrest-repo"}"
	IMAGE_PGBADGER="${TARGET_IMAGE_PGBADGER:-"perconalab/percona-postgresql-operator:main-ppg$PG_VER-pgbadger"}"

	desc 'update operator'
	deploy_operator '' "${src_dir}/deploy/operator.yaml" 'disabled' 'update'
	kubectl_bin diff -f installers/ansible/roles/pgo-operator/files/crds/perconapgclusters-crd.yaml
	kubectl_bin patch "perconapgcluster/${cluster}" --type json -p \
		'[
			{"op":"replace","path":"/spec/backup/backrestRepoImage","value":'${IMAGE_BACKREST_REPO}'},
			{"op":"replace","path":"/spec/backup/image","value":'${IMAGE_BACKREST}'},
			{"op":"replace","path":"/spec/pgBadger/image","value":'${IMAGE_PGBADGER}'},
			{"op":"replace","path":"/spec/pgBouncer/image","value":'${IMAGE_PGBOUNCER}'},
			{"op":"replace","path":"/spec/pgPrimary/image","value":'${IMAGE_PG_HA}'},
			{"op":"replace","path":"/spec/userLabels/pgo-version","value":'${LATEST_TAG}'},
			{"op":"replace","path":"/metadata/labels/pgo-version","value":'${LATEST_TAG}'},
			{"op":"replace","path":"/spec/pause","value":false}
		]'

	wait_cluster_consistency "${cluster}"
	wait_deployment "${cluster}"

	if [[ $(kubectl_bin get deployment/${cluster} -o jsonpath='{.metadata.labels.pgo-version}') != ${LATEST_TAG} ]] \
		|| [[ $(kubectl_bin get deployment/${cluster} -o jsonpath='{.spec.template.metadata.labels.pgo-version}') != ${LATEST_TAG} ]]; then
		echo "PGO version has not been updated. Exiting..."
		exit 1
	fi
	#wait for some significant time period. Pgbouncer pod may not be started otherwise

	sleep 10
	kubectl_bin patch "perconapgcluster/${cluster}" --type json -p \
		'[
			{"op":"replace","path":"/spec/pgBouncer/size","value":1}
		]'
	wait_cluster_consistency "${cluster}"
	wait_deployment "${cluster}-pgbouncer"

	sleep 10
	compare_psql_cmd "select-1" '\c myapp \\\ SELECT * from myApp;' "${cluster}:${cluster}_pass@${cluster}-pgbouncer.${namespace}"

	backup_time_interval_min=5
	kubectl_bin patch "perconapgcluster/${cluster}" --type json -p \
		'[
			{"op":"add","path":"/spec/backup/schedule","value":[{"name":"'${backup_time_interval_min}'min-backup","schedule":"*/'${backup_time_interval_min}' * * * *","keep":3,"type":"full","storage":"local"}]},
			{"op":"add","path":"/spec/backup/storages","value":{"local":{"type":"local"}}}
		]'
	sleep 10
	sleep $(next_backup_after_sec ${cluster}-${backup_time_interval_min}min-backup)
	kubectl_bin wait "job/${cluster}-full-sch-backup" --for=condition=Complete --timeout=300s

	compare_psql_cmd "select-1" '\c myapp \\\ SELECT * from myApp;' "${cluster}:${cluster}_pass@${cluster}-pgbouncer.${namespace}"

	kubectl create secret generic ${cluster}-ssl-ca --from-file=ca.crt=${conf_dir}/ca.crt
	kubectl create secret tls ${cluster}-ssl-keypair --cert=${conf_dir}/server.crt --key=${conf_dir}/server.key
	kubectl_bin delete -f ${conf_dir}/client.yml
	kubectl_bin apply -f ${test_dir}/conf/client.yml
	kubectl_bin patch "perconapgcluster/${cluster}" --type json -p \
		'[
			{"op":"add","path":"/spec/tlsOnly","value":true},
			{"op":"add","path":"/spec/sslCA","value":'"'${cluster}-ssl-ca'"'},
			{"op":"add","path":"/spec/sslSecretName","value":'"'${cluster}-ssl-keypair'"'},
			{"op":"add","path":"/spec/sslReplicationSecretName","value":'"'${cluster}-ssl-keypair'"'},
			{"op":"add","path":"/spec/pgBouncer/tlsSecret","value":'"'${cluster}-ssl-keypair'"'},
		]'

	disable_pgBouncer ${cluster}
	enable_pgBouncer ${cluster}

	#	wait_cluster_consistency "${cluster}"
	#	wait_deployment "${cluster}"
	#	wait_deployment "${cluster}-pgbouncer"
	sleep 200
	compare_psql "select-1" '\c myapp \\\ SELECT * from myApp;' "${cluster}:${cluster}_pass@${cluster}-pgbouncer.${namespace}" "verify-ca"

	destroy "${namespace}"
}

main
