#!/bin/bash

set -o errexit
set -o xtrace

test_dir=$(realpath $(dirname $0))
. ${test_dir}/../functions

function restore {
	local cluster=${1}
	local storage=${2}
	local backup_type=${3}
	local restore_target=''

	run_psql \
		'\c myapp \\\ INSERT INTO myApp (id) VALUES (100501)' \
		"postgres:$(get_psql_user_pass postgres ${cluster})@${cluster}.${namespace}"

	compare_psql_cmd \
		"select-1" \
		'\c myapp \\\ SELECT * from myApp;' \
		"postgres:$(get_psql_user_pass postgres ${cluster})@${cluster}.${namespace}"

	run_psql \
		'\c myapp \\\ INSERT INTO myApp (id) VALUES (100502)' \
		"postgres:$(get_psql_user_pass postgres ${cluster})@${cluster}.${namespace}"

	restore_target="$(run_psql \
		'\c myapp \\\ SELECT xmin FROM myApp WHERE id='100501';' \
		"postgres:$(get_psql_user_pass postgres ${cluster})@${cluster}.${namespace}" | awk '{$1=$1;print}')"

	run_psql \
		'DROP DATABASE myapp' \
		"postgres:$(get_psql_user_pass postgres ${cluster})@${cluster}.${namespace}"

	run_restore ${cluster} ${backup_type} ${storage} "${restore_target}" 'xid'

	compare_psql_cmd \
		"select-1" \
		'\c myapp \\\ SELECT * from myApp;' \
		"postgres:$(get_psql_user_pass postgres ${cluster})@${cluster}.${namespace}"
}

function apply_configs {
	local cluster=${1}

	set +x
	yq w $test_dir/conf/backrest-repo-secret.yml 'metadata.name' "${cluster}-backrest-repo-config" \
		| yq w - 'data[aws-s3-key]' "$(yq r -d"0" ${conf_dir}/cloud-secret.yml 'data.AWS_ACCESS_KEY_ID')" \
		| yq w - 'data[aws-s3-key-secret]' "$(yq r -d"0" ${conf_dir}/cloud-secret.yml 'data.AWS_SECRET_ACCESS_KEY')" \
		| yq w - 'data[gcs-key]' "$(yq r -d0 ${conf_dir}/cloud-secret-minio-gw.yml 'stringData."credentials.json"' | base64)" \
		| kubectl_bin apply -f -
	set -x
	yq r $test_dir/conf/custom-config.yml \
		| yq w - 'metadata.name' "${cluster}-custom-config" \
		| kubectl_bin apply -f -
}

function main {
	create_namespace $namespace
	deploy_operator

	cluster="some-name-${RANDOM}"

	desc 'Testing full backup/restore from s3'
	apply_configs ${cluster}
	spinup_pgcluster "${cluster}" "${src_dir}/deploy/cr.yaml" "s3" "${cluster}-custom-config" "false" "true" "full"
	sleep $(next_backup_after_sec "${cluster}-$(kubectl_bin get perconapgcluster/${cluster} -o jsonpath={.spec.backup.schedule[0].name})")
	kubectl_bin wait "job/${cluster}-full-sch-backup" --for=condition=Complete --timeout=300s
	restore ${cluster} "s3" "full"

	delete_cluster_gracefully ${cluster}

	desc 'Testing diff backup/restore from s3'
	cluster="some-name-${RANDOM}"
	apply_configs ${cluster}
	spinup_pgcluster "${cluster}" "${src_dir}/deploy/cr.yaml" "s3" "${cluster}-custom-config" "false" "true" "diff"
	sleep $(next_backup_after_sec "${cluster}-$(kubectl_bin get perconapgcluster/${cluster} -o jsonpath={.spec.backup.schedule[0].name})")
	kubectl_bin wait "job/${cluster}-diff-sch-backup" --for=condition=Complete --timeout=300s
	restore ${cluster} "s3" "diff"

	delete_cluster_gracefully ${cluster}


	desc 'Testing incr backup/restore from s3'
    cluster="some-name-${RANDOM}"
	apply_configs ${cluster}
	spinup_pgcluster "${cluster}" "${src_dir}/deploy/cr.yaml" "s3" "${cluster}-custom-config" "false" "true" "incr"
	sleep $(next_backup_after_sec "${cluster}-$(kubectl_bin get perconapgcluster/${cluster} -o jsonpath={.spec.backup.schedule[0].name})")
	kubectl_bin wait "job/${cluster}-incr-sch-backup" --for=condition=Complete --timeout=300s
	restore ${cluster} "s3" "incr"

	delete_cluster_gracefully ${cluster}

	desc 'Testing full backup/restore from s3, local'
	cluster="some-name-${RANDOM}"
	apply_configs ${cluster}
	spinup_pgcluster "${cluster}" "${src_dir}/deploy/cr.yaml" "local,s3" "${cluster}-custom-config" "false" "true" "full"
	sleep $(next_backup_after_sec "${cluster}-$(kubectl_bin get perconapgcluster/${cluster} -o jsonpath={.spec.backup.schedule[0].name})")
	kubectl_bin wait "job/${cluster}-full-sch-backup" --for=condition=Complete --timeout=300s
	restore ${cluster} "s3" "full"

	destroy ${namespace}
}

main
