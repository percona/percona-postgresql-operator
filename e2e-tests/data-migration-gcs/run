#!/bin/bash

set -o errexit
set -o xtrace

test_dir=$(realpath $(dirname $0))
. ${test_dir}/../functions

function apply_configs {
	local cluster=${1}

	set +x
	yq w ${conf_dir}/backrest-repo-secret.yml 'metadata.name' "${cluster}-backrest-repo-config" \
		| yq w - 'data[gcs-key]' "$(yq r -d0 ${conf_dir}/cloud-secret-minio-gw.yml 'stringData."credentials.json"' | base64)" \
		| kubectl_bin apply -f -
	set -x

	kubectl_bin apply \
		-f $conf_dir/client.yml
}

function create_pgo_k8s {
	local cluster_name="$(gcloud config get-value account | cut -d'@' -f1 | sed 's/\./\-/g')-pgo-upstream"
	export KUBECONFIG="/tmp/${cluster_name}"
	gcloud container clusters create \
		--zone=europe-west3-b \
		"${cluster_name}" \
		--cluster-version=1.20 \
		--machine-type=n1-standard-4 \
		--preemptible \
		--num-nodes=3 \
		--no-enable-autoupgrade\
		--quiet \
			>/dev/null 2>&1
	unset KUBECONFIG
	echo "${cluster_name}"
}

function main {
	if [[ -n ${PGO_K8S_NAME} ]]; then
		export TARGET_CONFIG="/tmp/${PGO_K8S_NAME}"
		cleanup_rbac
		kubectl_bin delete namespace pgo || true
	else
		pgo_k8s_name=$(create_pgo_k8s)
		export TARGET_CONFIG="/tmp/${pgo_k8s_name}"
	fi
	desc "Starting upstream up"
	kubectl_bin create namespace pgo
	kubectl_bin config set-context $(kubectl_bin config current-context) --namespace="pgo"
	kubectl_bin apply -f https://raw.githubusercontent.com/CrunchyData/postgres-operator/v4.7.0/installers/kubectl/postgres-operator.yml
	wait_job_completion "pgo-deploy"
	wait_deployment "postgres-operator"
	PGO_HOME="$(mktemp -d)"
	kubectl_bin apply -f $conf_dir/client.yml
	curl https://raw.githubusercontent.com/CrunchyData/postgres-operator/v4.7.0/installers/kubectl/client-setup.sh \
		| KUBECONFIG=${TARGET_CONFIG} HOME="${PGO_HOME}" bash -
	KUBECONFIG=${TARGET_CONFIG} kubectl port-forward svc/postgres-operator 8443:8443 &
	PROXY_PID=$!
	sleep 10
	set +x
	yq r -d0 ${conf_dir}/cloud-secret-minio-gw.yml 'stringData."credentials.json"' >${PGO_HOME}/gcs-credentials.json
	set -x
	pgo_cluster_name="some-name-${RANDOM}"

	case "$(echo ${IMAGE_PG_HA} | grep -Eo 'ppg[0-9]+')" in
	'ppg12')
		ccpImageTag='centos8-12.7-4.7.0'
		;;
	'ppg13')
		ccpImageTag='centos8-13.3-4.7.0'
		;;
	esac

	PATH="${PGO_HOME}/.pgo/pgo:$PATH" \
	PGOUSER="${PGO_HOME}/.pgo/pgo/pgouser" \
	PGO_CA_CERT="${PGO_HOME}/.pgo/pgo/client.crt" \
	PGO_CLIENT_CERT="${PGO_HOME}/.pgo/pgo/client.crt" \
	PGO_CLIENT_KEY="${PGO_HOME}/.pgo/pgo/client.key" \
	pgo create cluster "${pgo_cluster_name}" \
		--apiserver-url https://127.0.0.1:8443 \
		--namespace pgo \
		--password-superuser=postgres_pass \
		--password-replication=primaryuser_pass \
		--password=opensourcehippo \
		--pgbackrest-gcs-bucket "${BUCKET}" \
		--pgbackrest-gcs-key "${PGO_HOME}/gcs-credentials.json" \
		--ccp-image-tag "${ccpImageTag}" \
		--pgbackrest-storage-type gcs
	wait_deployment "${pgo_cluster_name}-backrest-shared-repo"
	wait_deployment "${pgo_cluster_name}"
	wait_job_completion "${pgo_cluster_name}-stanza-create" 'false'
	wait_job_completion "backrest-backup-${pgo_cluster_name}"
	kill ${PROXY_PID}

	desc "Switching to percona pg"
	unset TARGET_CONFIG

	create_namespace $namespace
	deploy_cert_manager
	deploy_operator

	desc 'create first PG cluster'
	cluster="some-name-${RANDOM}"

	apply_configs "${cluster}"
	spinup_pgcluster "${cluster}" "${src_dir}/deploy/cr.yaml" "gcs+${pgo_cluster_name}"

	desc "Switching to upstream"
	[[ -n ${PGO_K8S_NAME} ]] && export TARGET_CONFIG="/tmp/${PGO_K8S_NAME}" || export TARGET_CONFIG="/tmp/${pgo_k8s_name}"

	run_psql \
		'CREATE DATABASE myapp; \c myapp \\\ CREATE TABLE IF NOT EXISTS myApp (id int PRIMARY KEY);' \
		"postgres:postgres_pass@${pgo_cluster_name}.pgo"
	run_psql \
		'\c myapp \\\ INSERT INTO myApp (id) VALUES (100500)' \
		"postgres:postgres_pass@${pgo_cluster_name}.pgo"
	sleep 60

	desc "Switching to percona pg"
	unset TARGET_CONFIG

	compare_psql_cmd "select-1" '\c myapp \\\ SELECT * from myApp;' "postgres:postgres_pass@${cluster}.${namespace}"

	desc "Switching to upstream"
	[[ -n ${PGO_K8S_NAME} ]] && export TARGET_CONFIG="/tmp/${PGO_K8S_NAME}" || export TARGET_CONFIG="/tmp/${pgo_k8s_name}"

	run_psql \
		'\c myapp \\\ INSERT INTO myApp (id) VALUES (100501)' \
		"postgres:postgres_pass@${pgo_cluster_name}.pgo"

	sleep 60
	kubectl_bin delete pgcluster --all

	desc "Switching to percona pg"
	unset TARGET_CONFIG

	compare_psql_cmd "select-2" '\c myapp \\\ SELECT * from myApp;' "postgres:postgres_pass@${cluster}.${namespace}"

	kubectl_bin patch "perconapgcluster/${cluster}" \
		--type json \
		-p='[{"op":"replace","path":"/spec/standby","value":false}]'
    sleep 30
	wait_job_completion "backrest-backup-${cluster}"

	[[ -n ${pgo_k8s_name} ]] && gcloud container clusters delete --zone=europe-west3-b "${pgo_k8s_name}" --quiet
	destroy ${namespace}
}

main
