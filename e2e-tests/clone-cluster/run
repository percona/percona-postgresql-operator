#!/bin/bash

set -o errexit
set -o xtrace

test_dir=$(realpath $(dirname $0))
. ${test_dir}/../functions

create_pgcluster_clone_from() {
	local cluster=$1
	local create_secrets=${2:-"true"}

	if [[ ${create_secrets} == "true" ]]; then
		create_user_secrets "${cluster}-clone"
	fi
	apply_cluster "${src_dir}/deploy/cr.yaml" "${cluster}-clone" "local" "${cluster}"
	wait_bootstrap_completeness "${cluster}-clone"
}

main() {
	create_namespace $namespace
	deploy_operator

	desc 'create first PG cluster'

	cluster="some-name"
	spinup_pgcluster "${cluster}" "${src_dir}/deploy/cr.yaml"
	create_backup "${cluster}" "fulldata" "full"

	desc 'create clone from live cluster'

	create_pgcluster_clone_from "${cluster}"
	compare_psql_cmd "select-1" '\c myapp \\\ SELECT * from myApp;' "some-name:$(get_psql_user_pass some-name "${cluster}-clone")@${cluster}-clone-pgbouncer.${namespace}"

	kubectl_bin patch "perconapgcluster/${cluster}" --type json -p '[{"op":"add","path":"/spec/keepBackups","value":true}]'
	sleep 30
	wait_deployment "${cluster}"
	sleep 30

	desc 'remove both clusters'

	kubectl delete perconapgclusters --all
	wait_for_delete "deployment/${cluster}"
	wait_for_delete "deployment/${cluster}-backrest-shared-repo"
	wait_for_delete "deployment/${cluster}-clone"
	wait_for_delete "deployment/${cluster}-clone-backrest-shared-repo"

	desc 'start clone from backup only'

	create_pgcluster_clone_from "${cluster}"
	compare_psql_cmd "select-1" '\c myapp \\\ SELECT * from myApp;' "some-name:$(get_psql_user_pass some-name "${cluster}-clone")@${cluster}-clone-pgbouncer.${namespace}"

	kubectl delete perconapgclusters --all
	wait_for_delete "deployment/${cluster}"
	wait_for_delete "deployment/${cluster}-backrest-shared-repo"
	wait_for_delete "deployment/${cluster}-clone"
	wait_for_delete "deployment/${cluster}-clone-backrest-shared-repo"
	kubectl_bin delete "secret/${cluster}-users-secret"
	kubectl delete pvc --all

	desc 'Create source cluster once again'
	spinup_pgcluster "${cluster}" "${src_dir}/deploy/cr.yaml"
	create_backup "${cluster}" "fulldata" "full"

	desc 'create clone from live cluster with secrets prepared by user'

	create_pgcluster_clone_from "${cluster}" "false"
	compare_psql_cmd "select-1" '\c myapp \\\ SELECT * from myApp;' "some-name:$(get_psql_user_pass some-name "${cluster}-clone")@${cluster}-clone-pgbouncer.${namespace}"

	kubectl_bin patch "perconapgcluster/${cluster}" --type json -p '[{"op":"add","path":"/spec/keepBackups","value":true}]'
	sleep 30
	wait_deployment "${cluster}"
	sleep 30

	desc 'remove both clusters'

	kubectl delete perconapgclusters --all
	wait_for_delete "deployment/${cluster}"
	wait_for_delete "deployment/${cluster}-backrest-shared-repo"
	wait_for_delete "deployment/${cluster}-clone"
	wait_for_delete "deployment/${cluster}-clone-backrest-shared-repo"

	desc 'start clone from backup only'

	create_pgcluster_clone_from "${cluster}"
	compare_psql_cmd "select-1" '\c myapp \\\ SELECT * from myApp;' "some-name:$(get_psql_user_pass some-name "${cluster}-clone")@${cluster}-clone-pgbouncer.${namespace}"

	destroy $namespace
}

main
