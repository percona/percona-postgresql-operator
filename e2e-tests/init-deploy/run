#!/bin/bash

set -o errexit
set -o xtrace

test_dir=$(realpath $(dirname $0))
. ${test_dir}/../functions

create_namespace $namespace
deploy_operator
deploy_helm $namespace

cluster="some-name"
desc 'install PMM Server'
platform=kubernetes
helm del --purge monitoring || :
if [[ ${PLATFORM} == "OPENSHIFT" ]]; then
	platform=openshift
	oc create sa pmm-server
	oc adm policy add-scc-to-user privileged -z pmm-server

	helm install monitoring --set imageTag=$IMAGE_PMM_SERVER_TAG --set imageRepo=$IMAGE_PMM_SERVER_REPO --set platform=$platform --set sa=pmm-server --set supresshttp2=false https://percona-charts.storage.googleapis.com/pmm-server-${PMM_SERVER_VER}.tgz
else
	helm install monitoring --set imageTag=$IMAGE_PMM_SERVER_TAG --set imageRepo=$IMAGE_PMM_SERVER_REPO --set platform=$platform https://percona-charts.storage.googleapis.com/pmm-server-${PMM_SERVER_VER}.tgz
fi
desc 'create first PG cluster'
spinup_pgcluster "${cluster}" "${test_dir}/conf/cr.yaml"
compare_kubectl "deployment/${cluster}" "always"
kubectl_bin patch "perconapgcluster/${cluster}" --type json -p \
	'[
		{"op":"replace","path":"/spec/backup/imagePullPolicy","value":"IfNotPresent"},
		{"op":"replace","path":"/spec/pgBadger/imagePullPolicy","value":"IfNotPresent"},
		{"op":"replace","path":"/spec/pgBouncer/imagePullPolicy","value":"IfNotPresent"},
		{"op":"replace","path":"/spec/pgPrimary/imagePullPolicy","value":"IfNotPresent"},
		{"op":"replace","path":"/spec/pmm/imagePullPolicy","value":"IfNotPresent"}
	]'

sleep 240
wait_cluster_consistency "${cluster}"

compare_kubectl "deployment/${cluster}" "notpresent"

kubectl delete PerconaPGCluster --ignore-not-found --all
wait_for_delete "deployment/${cluster}"
wait_for_delete "deployment/${cluster}-backrest-shared-repo"

desc 'create second PG cluster'

spinup_pgcluster "${cluster}" "${src_dir}/deploy/cr.yaml"

compare_kubectl "deployment/postgres-operator"
compare_kubectl "deployment/${cluster}"
compare_kubectl "deployment/${cluster}-backrest-shared-repo"
compare_kubectl "service/postgres-operator"
compare_kubectl "service/${cluster}"
compare_kubectl "service/${cluster}-backrest-shared-repo"
compare_kubectl "deployment/${cluster}-pgbouncer"
compare_kubectl "service/${cluster}-pgbouncer"

desc 'checking essential users access'

compare_psql_cmd "select-1" '\c myapp \\\ SELECT * from myApp;' "postgres:$(get_psql_user_pass postgres ${cluster})@${cluster}.${namespace}"
compare_psql_cmd "select-1" '\c myapp \\\ SELECT * from myApp;' "some-name:$(get_psql_user_pass some-name ${cluster})@${cluster}.${namespace}"

compare_psql_cmd "show-1" 'SHOW DATABASES' "pgbouncer:$(get_psql_user_pass pgbouncer ${cluster})@${cluster}-pgbouncer.${namespace}"
kubectl_bin patch "perconapgcluster/${cluster}" --type json -p \
	'[
		{"op":"replace","path":"/spec/pgBouncer/exposePostgresUser","value":true}
	]'
sleep 15
compare_psql_cmd "select-1" '\c myapp \\\ SELECT * from myApp;' "postgres:$(get_psql_user_pass postgres ${cluster})@${cluster}-pgbouncer.${namespace}"
compare_psql_cmd "select-1" '\c myapp \\\ SELECT * from myApp;' "some-name:$(get_psql_user_pass some-name ${cluster})@${cluster}-pgbouncer.${namespace}"

kubectl_bin patch "perconapgcluster/${cluster}" --type json -p \
	'[
		{"op":"replace","path":"/spec/pgBouncer/exposePostgresUser","value":false}
	]'
sleep 15
compare_psql "select-2" '\c myapp \\\ SELECT * from myApp;' "postgres:$(get_psql_user_pass postgres ${cluster})@${cluster}-pgbouncer.${namespace}" "allow"

if [[ -n $(which aws) ]]; then
	desc "Starting to test private registry"

	kubectl delete PerconaPGCluster --ignore-not-found --all
	wait_for_delete "deployment/${cluster}"
	wait_for_delete "deployment/${cluster}-backrest-shared-repo"

	kubectl delete --ignore-not-found "deployment/postgres-operator"
	wait_for_delete "deployment/postgres-operator"

	kubectl delete --ignore-not-found "job/pgo-deploy"
	wait_for_delete "job/pgo-deploy"

	kubectl delete sa pgo-deployer-sa pgo-default postgres-operator --ignore-not-found

	set +x
	kubectl create secret docker-registry ecr \
		--docker-server="${ECR}" \
		--docker-username=AWS \
		--docker-password="$(aws ecr get-login-password --region us-east-1)"
	set -x

	export IMAGE_APISERVER="${ECR}/${IMAGE_APISERVER}"
	export IMAGE_PGOEVENT="${ECR}/${IMAGE_PGOEVENT}"
	export IMAGE_RMDATA="${ECR}/${IMAGE_RMDATA}"
	export IMAGE_SCHEDULER="${ECR}/${IMAGE_SCHEDULER}"
	export IMAGE_OPERATOR="${ECR}/${IMAGE_OPERATOR}"
	export IMAGE_DEPLOYER="${ECR}/${IMAGE_DEPLOYER}"
	export IMAGE_PGBOUNCER="${ECR}/${IMAGE_PGBOUNCER}"
	export IMAGE_PG_HA="${ECR}/${IMAGE_PG_HA}"
	export IMAGE_BACKREST="${ECR}/${IMAGE_BACKREST}"
	export IMAGE_BACKREST_REPO="${ECR}/${IMAGE_BACKREST_REPO}"
	export IMAGE_PGBADGER="${ECR}/${IMAGE_PGBADGER}"

	deploy_operator "ecr"
	spinup_pgcluster "${cluster}" "${src_dir}/deploy/cr.yaml" "false" "false" "false" "false" "false" "false" "$conf_dir/client.yml" "$namespace" "true"
	compare_psql_cmd "select-1" '\c myapp \\\ SELECT * from myApp;' "postgres:$(get_psql_user_pass postgres ${cluster})@${cluster}-pgbouncer.${namespace}"

fi

destroy $namespace
