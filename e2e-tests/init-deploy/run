#!/bin/bash

set -o errexit
set -o xtrace

test_dir=$(realpath $(dirname $0))
. ${test_dir}/../functions

create_namespace $namespace
deploy_operator

desc 'create first PG cluster'
cluster="some-name"
kubectl_bin apply \
	-f $conf_dir/${cluster}-secrets.yml \
	-f $conf_dir/client.yml

spinup_pgcluster "${cluster}" "${src_dir}/deploy/cr.yaml"

compare_kubectl "deployment/postgres-operator"
compare_kubectl "deployment/${cluster}"
compare_kubectl "deployment/${cluster}-backrest-shared-repo"
compare_kubectl "service/postgres-operator"
compare_kubectl "service/${cluster}"
compare_kubectl "service/${cluster}-backrest-shared-repo"
compare_kubectl "deployment/${cluster}-pgbouncer"
compare_kubectl "service/${cluster}-pgbouncer"

desc 'checking essential users access'

compare_psql_cmd "select-1" '\c myapp \\\ SELECT * from myApp;' "postgres:postgres_pass@${cluster}.${namespace}"
compare_psql_cmd "select-1" '\c myapp \\\ SELECT * from myApp;' "some-name:some-name_pass@${cluster}.${namespace}"

compare_psql_cmd "show-1" 'SHOW DATABASES' "pgbouncer:pgbouncer_pass@${cluster}-pgbouncer.${namespace}"
compare_psql_cmd "select-1" '\c myapp \\\ SELECT * from myApp;' "some-name:some-name_pass@${cluster}-pgbouncer.${namespace}"

if [[ -n $(which aws) ]]; then
	desc "Starting to test private registry"

	kubectl delete PerconaPGCluster --ignore-not-found --all
	wait_for_delete "deployment/${cluster}"
	wait_for_delete "deployment/${cluster}-backrest-shared-repo"

	kubectl delete --ignore-not-found "deployment/postgres-operator"
	wait_for_delete "deployment/postgres-operator"

	kubectl delete --ignore-not-found "job/pgo-deploy"
	wait_for_delete "job/pgo-deploy"

	kubectl delete sa pgo-deployer-sa pgo-default postgres-operator --ignore-not-found

	set +x
	kubectl create secret docker-registry ecr \
		--docker-server="${ECR}" \
		--docker-username=AWS \
		--docker-password="$(aws ecr get-login-password --region us-east-1)"
	set -x

	export IMAGE_APISERVER="${ECR}/${IMAGE_APISERVER}"
	export IMAGE_PGOEVENT="${ECR}/${IMAGE_PGOEVENT}"
	export IMAGE_RMDATA="${ECR}/${IMAGE_RMDATA}"
	export IMAGE_SCHEDULER="${ECR}/${IMAGE_SCHEDULER}"
	export IMAGE_OPERATOR="${ECR}/${IMAGE_OPERATOR}"
	export IMAGE_DEPLOYER="${ECR}/${IMAGE_DEPLOYER}"
	export IMAGE_PGBOUNCER="${ECR}/${IMAGE_PGBOUNCER}"
	export IMAGE_PG_HA="${ECR}/${IMAGE_PG_HA}"
	export IMAGE_BACKREST="${ECR}/${IMAGE_BACKREST}"
	export IMAGE_BACKREST_REPO="${ECR}/${IMAGE_BACKREST_REPO}"
	export IMAGE_PGBADGER="${ECR}/${IMAGE_PGBADGER}"

	deploy_operator "ecr"
	spinup_pgcluster "${cluster}" "${src_dir}/deploy/cr.yaml"

fi

destroy $namespace
