#!/bin/bash

set -o errexit
set -o xtrace

test_dir=$(realpath $(dirname $0))
. "${test_dir}"/../functions

get_operator_pod() {
	echo $(kubectl_bin get pods --selector=name=postgres-operator -o jsonpath={'.items[].metadata.name'})
}

wait_deployments_removal() {
	local name=${1}
	local target_size=${2}

	set +o xtrace
	retry=0
	until [[ $(kubectl_bin get deployments --selector=name=${name} -o jsonpath='{.items}' | jq length) == ${target_size} ]]; do
		sleep 1
		echo -n .
		let retry+=1
		if [ $retry -ge 360 ]; then
			kubectl_bin describe pod/$pod
			kubectl_bin logs $pod
			kubectl_bin logs $(get_operator_pod) \
				| grep -v 'level=info' \
				| grep -v 'level=debug' \
				| grep -v 'Getting tasks for pod' \
				| grep -v 'Getting pods from source' \
				| tail -100
			echo max retry count $retry reached. something went wrong with operator or kubernetes cluster
			exit 1
		fi
	done
	set -o xtrace
}

main() {
	create_namespace $namespace
	deploy_operator
	deploy_chaos_mesh $namespace

	desc 'start cluster'
	cluster="some-name-${RANDOM}"

	spinup_pgcluster "${cluster}" "${src_dir}/deploy/cr.yaml"

	kill_pod "$(get_operator_pod)"
	wait_deployment "postgres-operator"
	kubectl_bin patch "perconapgcluster/${cluster}" --type json -p '[{"op":"replace","path":"/spec/pgReplicas/hotStandby/size","value":0}]'
	wait_deployments_removal "${cluster}-replica" 0

	failure_pod "$(get_operator_pod)"
	wait_deployment "postgres-operator"
	kubectl_bin patch "perconapgcluster/${cluster}" --type json -p '[{"op":"replace","path":"/spec/pgReplicas/hotStandby/size","value":2}]'
	wait_deployments_removal "${cluster}-replica" 2

	network_loss "$(get_operator_pod)"
	wait_deployment "postgres-operator" # Operator deployment won't be ready until network loss will be over and kube API become available
	kubectl_bin patch "perconapgcluster/${cluster}" --type json -p '[{"op":"replace","path":"/spec/pgReplicas/hotStandby/size","value":0}]'
	wait_deployments_removal "${cluster}-replica" 0

	kubectl delete NetworkChaos --all
	kubectl delete PodChaos --all
	sleep 5
	destroy_chaos_mesh $namespace
	destroy "$namespace"
}

main
