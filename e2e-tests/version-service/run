#!/bin/bash

set -o errexit
set -o xtrace

test_dir=$(realpath $(dirname $0))
. "${test_dir}"/../functions

VS_URL="http://version-service"
VS_PORT="11000"
VS_ENDPOINT="${VS_URL}:${VS_PORT}"

function deploy_version_service {
	desc 'install version service'
	kubectl_bin create configmap versions \
		--from-file "${test_dir}/conf/operator.9.9.9.pg-operator.dep.json" \
		--from-file "${test_dir}/conf/operator.9.9.9.pg-operator.json"
	kubectl_bin apply -f "${test_dir}/conf/vs.yml"
	$sed 's/version-service/version-service-cr/g' "${test_dir}/conf/vs.yml" \
		| yq w - -d0 'spec.template.spec.containers[0].image' $(yq r -d0 "${test_dir}/conf/vs.yml" 'spec.template.spec.containers[0].image') \
		| kubectl_bin apply -f -
	sleep 10
}

function apply_version {
	local cluster=$1
	local version_to_upgrade=$2
	local release_channel=$3
	local db_version=$4
	local vs_endpoint=${5:-"${VS_ENDPOINT}"}
	local update_finished_log_entries=${6:-"0"}

	kubectl_bin patch "perconapgcluster/${cluster}" --type json \
		-p='[
				{"op":"add","path":"/spec/upgradeOptions","value":{"versionServiceEndpoint":"'${vs_endpoint}'","apply":"'${release_channel}'"}},
				{"op":"replace","path":"/metadata/labels/pgo-version","value":"'${version_to_upgrade}'"},
				{"op":"replace","path":"/spec/userLabels/pgo-version","value":"'${version_to_upgrade}'"}
			]'
	sleep 10

	wait_smart_update ${cluster} ${update_finished_log_entries}
	kubectl_bin delete jobs --selector=pg-cluster=cluster1
	create_backup "${cluster}" "fulldata" "full"

	verify_applied_version ${cluster} ${version_to_upgrade} ${release_channel} ${db_version}
}

function verify_applied_version {
	local cluster=$1
	local version_to_upgrade=$2
	local release_channel=$3
	local db_version=$4

	kubectl_bin get deployments,jobs \
		--selector=pg-cluster=${cluster} \
		-o jsonpath='{range .items[*]}{range .spec.template.spec.containers[*]}{.image}{"\n"}{end}{end}' | sort -s -u \
		>"${tmp_dir}/${version_to_upgrade}-deployed-${release_channel}-images.txt"

	diff -u "${tmp_dir}/${version_to_upgrade}-deployed-${release_channel}-images.txt" "${test_dir}/compare/${db_version}.txt"
}

function check_telemetry_transfer {
	local cr_vs_uri=${1}
	local cr_vs_channel=${2:-"disabled"}
	local telemetry_state=${3:-"enabled"}
	local cluster=minimal

	yq r "${src_dir}/deploy/cr-minimal.yaml" \
		| yq w - 'spec.upgradeOptions.versionServiceEndpoint' "${cr_vs_uri}" \
		| yq w - 'spec.upgradeOptions.apply' ${cr_vs_channel} \
			>${tmp_dir}/cr.minimal.apply.${cr_vs_channel}.yaml
	spinup_pgcluster "${cluster}" "${tmp_dir}/cr.minimal.apply.${cr_vs_channel}.yaml"

	kubectl_bin logs $(kubectl get pods --selector=run=version-service-cr -o jsonpath='{.items[0].metadata.name}') \
		| grep -E 'server request payload|unary call' \
		| grep -Eo '\{.*\}' \
		| jq 'del(."grpc.request.content".msg.customResourceUid)' \
		| jq 'del(."grpc.start_time")' \
		| jq 'del(."grpc.time_ms")' \
			>${tmp_dir}/${telemetry_state}_telemetry.version-service-cr.log.json

	kubectl_bin logs $(kubectl get pods --selector=run=version-service -o jsonpath='{.items[0].metadata.name}') \
		| grep -E 'server request payload|unary call' \
		| grep -Eo '\{.*\}' \
		| jq 'del(."grpc.request.content".msg.customResourceUid)' \
		| jq 'del(."grpc.start_time")' \
		| jq 'del(."grpc.time_ms")' \
			>${tmp_dir}/${telemetry_state}_telemetry.version-service.log.json

	diff -u ${tmp_dir}/${telemetry_state}_telemetry.version-service.log.json ${test_dir}/compare/${telemetry_state}_telemetry.version-service.log.json
	[[ ${telemetry_state} == "disabled" && ${cr_vs_channel} == "recommended" ]] \
		&& diff -u ${tmp_dir}/enabled_telemetry.version-service-cr.log.json ${test_dir}/compare/enabled_telemetry.version-service-cr.log.json \
		|| diff -u ${tmp_dir}/${telemetry_state}_telemetry.version-service-cr.log.json ${test_dir}/compare/${telemetry_state}_telemetry.version-service-cr.log.json

	kubectl_bin delete perconapgcluster/${cluster}
	wait_job_completion $(kubectl_bin -n ${namespace} get job --selector=pg-cluster=${cluster},pgrmdata='true' -o jsonpath='{.items[0].metadata.name}')
}

main() {
	create_namespace $namespace
	deploy_operator "" "${src_dir}/deploy/operator.yaml" "disabled" "install" "${namespace}" "false" ${VS_ENDPOINT}
	deploy_version_service

	check_telemetry_transfer "http://version-service-cr:11000" "disabled" "enabled"

	kubectl_bin -n $namespace delete pod --selector=run=version-service
	wait_deployment 'version-service'
	kubectl_bin -n $namespace delete pod --selector=run=version-service-cr
	wait_deployment 'version-service-cr'

	# Disabling telemetry on the operator level
	kubectl_bin -n $namespace patch deployment/postgres-operator \
		--type json \
		-p='[{"op":"replace","path":"/spec/template/spec/containers/1/env/7","value":{"name":"DISABLE_TELEMETRY","value":"true"}}]'
	wait_deployment 'postgres-operator'

	check_telemetry_transfer "http://version-service-cr:11000" "disabled" "disabled"
	check_telemetry_transfer "http://version-service-cr:11000" "recommended" "disabled"

	# Enabling telemetry on the operator level
	kubectl_bin -n $namespace patch deployment/postgres-operator \
		--type json \
		-p='[{"op":"replace","path":"/spec/template/spec/containers/1/env/7","value":{"name":"DISABLE_TELEMETRY","value":"false"}}]'
	wait_deployment 'postgres-operator'

	desc 'Use simple recommended channel'
	cluster="cluster1"
	PGO_TAG='1.3.0'
	PG_VER='13'
	IMAGE_PGBOUNCER="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbouncer"
	IMAGE_PG_HA="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-postgres-ha"
	IMAGE_BACKREST="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbackrest"
	IMAGE_BACKREST_REPO="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbackrest-repo"
	IMAGE_PGBADGER="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbadger"
	spinup_pgcluster "${cluster}" "${test_dir}/conf/${PGO_TAG}_cr.yaml"

	apply_version ${cluster} '9.9.9' "recommended" "${PG_VER}" "${VS_ENDPOINT}" 0

	kubectl delete perconapgcluster/${cluster}
	wait_for_delete "deployment/${cluster}"
	wait_for_delete "deployment/${cluster}-backrest-shared-repo"

	desc 'Use major version recommended channel'
	PG_VER='12'
	IMAGE_PGBOUNCER="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbouncer"
	IMAGE_PG_HA="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-postgres-ha"
	IMAGE_BACKREST="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbackrest"
	IMAGE_BACKREST_REPO="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbackrest-repo"
	IMAGE_PGBADGER="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbadger"
	spinup_pgcluster "${cluster}" "${test_dir}/conf/${PGO_TAG}_cr.yaml"

	apply_version ${cluster} '9.9.9' "12-recommended" "${PG_VER}" "${VS_ENDPOINT}" 1

	kubectl delete perconapgcluster/${cluster}
	wait_for_delete "deployment/${cluster}"
	wait_for_delete "deployment/${cluster}-backrest-shared-repo"

	desc 'Updating PG cluster with 14 from 13'
	PG_VER='13'
	IMAGE_PGBOUNCER="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbouncer"
	IMAGE_PG_HA="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-postgres-ha"
	IMAGE_BACKREST="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbackrest"
	IMAGE_BACKREST_REPO="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbackrest-repo"
	IMAGE_PGBADGER="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbadger"
	spinup_pgcluster "${cluster}" "${test_dir}/conf/${PGO_TAG}_cr.yaml"
	# No update between major versions should happen. Thus expected revision is 1
	apply_version ${cluster} '9.9.9' "14-recommended" "${PGO_TAG}-${PG_VER}" "${VS_ENDPOINT}" 1

	kubectl delete perconapgcluster/${cluster}
	wait_for_delete "deployment/${cluster}"
	wait_for_delete "deployment/${cluster}-backrest-shared-repo"

	desc 'PG cluster update with the latest image by version service'
	PG_VER='12'
	IMAGE_PGBOUNCER="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbouncer"
	IMAGE_PG_HA="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-postgres-ha"
	IMAGE_BACKREST="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbackrest"
	IMAGE_BACKREST_REPO="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbackrest-repo"
	IMAGE_PGBADGER="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbadger"
	spinup_pgcluster "${cluster}" "${test_dir}/conf/${PGO_TAG}_cr.yaml"

	apply_version ${cluster} '9.9.9' "latest" ${PG_VER} "${VS_ENDPOINT}" 2

	kubectl delete perconapgcluster/${cluster}
	wait_for_delete "deployment/${cluster}"
	wait_for_delete "deployment/${cluster}-backrest-shared-repo"

	desc 'PG cluster with major version latest release channel'
	PG_VER='12'
	IMAGE_PGBOUNCER="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbouncer"
	IMAGE_PG_HA="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-postgres-ha"
	IMAGE_BACKREST="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbackrest"
	IMAGE_BACKREST_REPO="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbackrest-repo"
	IMAGE_PGBADGER="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbadger"
	spinup_pgcluster "${cluster}" "${test_dir}/conf/${PGO_TAG}_cr.yaml"

	apply_version ${cluster} '9.9.9' "12-latest" "${PG_VER}" "${VS_ENDPOINT}" 3

	kubectl delete perconapgcluster/${cluster}
	wait_for_delete "deployment/${cluster}"
	wait_for_delete "deployment/${cluster}-backrest-shared-repo"

	desc 'PG cluster update with explicitly specified image inside version service'
	PG_VER='13'
	kubectl_bin apply -f $conf_dir/client.yml
	IMAGE_PGBOUNCER="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbouncer"
	IMAGE_PG_HA="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-postgres-ha"
	IMAGE_BACKREST="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbackrest"
	IMAGE_BACKREST_REPO="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbackrest-repo"
	IMAGE_PGBADGER="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbadger"
	spinup_pgcluster "${cluster}" "${test_dir}/conf/${PGO_TAG}_cr.yaml"

	apply_version ${cluster} '9.9.9' "${PG_VER}.7" ${PG_VER} "${VS_ENDPOINT}" 4

	kubectl delete perconapgcluster/${cluster}
	wait_for_delete "deployment/${cluster}"
	wait_for_delete "deployment/${cluster}-backrest-shared-repo"

	desc 'PG cluster with version service offline'
	PG_VER='13'
	IMAGE_PGBOUNCER="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbouncer"
	IMAGE_PG_HA="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-postgres-ha"
	IMAGE_BACKREST="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbackrest"
	IMAGE_BACKREST_REPO="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbackrest-repo"
	IMAGE_PGBADGER="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbadger"
	spinup_pgcluster "${cluster}" "${test_dir}/conf/${PGO_TAG}_cr.yaml"

	apply_version ${cluster} '9.9.9' "latest" "${PGO_TAG}-${PG_VER}" 'http://not-a-version-service/' 4

	kubectl delete perconapgcluster/${cluster}
	wait_for_delete "deployment/${cluster}"
	wait_for_delete "deployment/${cluster}-backrest-shared-repo"


	desc 'Updating PG cluster with version service available but disabled'
	PG_VER='12'
	IMAGE_PGBOUNCER="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbouncer"
	IMAGE_PG_HA="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-postgres-ha"
	IMAGE_BACKREST="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbackrest"
	IMAGE_BACKREST_REPO="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbackrest-repo"
	IMAGE_PGBADGER="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbadger"
	spinup_pgcluster "${cluster}" "${test_dir}/conf/${PGO_TAG}_cr.yaml"

	apply_version ${cluster} '9.9.9' "disabled" "${PGO_TAG}-${PG_VER}" "${VS_ENDPOINT}" 4

	kubectl delete perconapgcluster/${cluster}
	wait_for_delete "deployment/${cluster}"
	wait_for_delete "deployment/${cluster}-backrest-shared-repo"

	desc 'Start the cluster up with version service images'
	PG_VER='12'
	IMAGE_PGBOUNCER="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbouncer"
	IMAGE_PG_HA="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-postgres-ha"
	IMAGE_BACKREST="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbackrest"
	IMAGE_BACKREST_REPO="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbackrest-repo"
	IMAGE_PGBADGER="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbadger"

	yq w -i "${test_dir}/conf/${PGO_TAG}_cr.yaml" 'metadata.labels.pgo-version' "9.9.9"
	yq w -i "${test_dir}/conf/${PGO_TAG}_cr.yaml" 'spec.userLabels.pgo-version' "9.9.9"
	yq w -i "${test_dir}/conf/${PGO_TAG}_cr.yaml" 'spec.upgradeOptions.versionServiceEndpoint' "${VS_ENDPOINT}"
	yq w -i --style=single "${test_dir}/conf/${PGO_TAG}_cr.yaml" 'spec.upgradeOptions.apply' "recommended"

	spinup_pgcluster "${cluster}" "${test_dir}/conf/${PGO_TAG}_cr.yaml"

	verify_applied_version "${cluster}" '9.9.9' "recommended" "14"

	kubectl delete perconapgcluster/${cluster}
	wait_for_delete "deployment/${cluster}"
	wait_for_delete "deployment/${cluster}-backrest-shared-repo"

	destroy "${namespace}"
}

main
